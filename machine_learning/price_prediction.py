import pandas as pd
import numpy as np

def predict_price(modele, voiture_dict, colonnes_reference):
    """
    Pr√©dit le prix d'une voiture √† partir d'un dictionnaire de caract√©ristiques.
    
    - modele : pipeline entra√Æn√© (ex : modele_knn)
    - voiture_dict : dictionnaire contenant les features de la voiture
    - colonnes_reference : colonnes utilis√©es √† l'entra√Ænement (X_test.columns)
    """
    import pandas as pd
    import numpy as np

    df_voiture = pd.DataFrame([voiture_dict])

    # Compl√©ter les colonnes manquantes (ex : one-hot encoding)
    cols_manquantes = [col for col in colonnes_reference if col not in df_voiture.columns]
    df_manquantes = pd.DataFrame(0, index=np.arange(len(df_voiture)), columns=cols_manquantes)

    # Fusionner et r√©aligner les colonnes
    df_complet = pd.concat([df_voiture, df_manquantes], axis=1)
    df_complet = df_complet.reindex(columns=colonnes_reference, fill_value=0)

    # Pr√©diction
    prix = modele.predict(df_complet)
    return prix[0]





def analyser_prix_prediction(modele, voiture_exemple: dict, colonnes_reference, df: pd.DataFrame):
    """
    Pr√©dit le prix d'une voiture et le compare aux voitures similaires du dataset df.
    
    Param√®tres :
        modele : mod√®le pipeline entra√Æn√© (ex: KNN)
        voiture_exemple : dictionnaire avec les caract√©ristiques de la voiture
        colonnes_reference : colonnes du jeu d'entra√Ænement (ex: X_train.columns)
        df : ton DataFrame contenant les donn√©es encod√©es + la colonne 'prix'
    """
    # 1. Cr√©er le DataFrame pour la voiture
    df_voiture = pd.DataFrame([voiture_exemple])

    # 2. Compl√©ter les colonnes manquantes
    cols_manquantes = [col for col in colonnes_reference if col not in df_voiture.columns]
    df_manquantes = pd.DataFrame(0, index=[0], columns=cols_manquantes)

    df_voiture_encoded = pd.concat([df_voiture, df_manquantes], axis=1)
    df_voiture_encoded = df_voiture_encoded.reindex(columns=colonnes_reference, fill_value=0)

    # 3. Pr√©dire le prix
    prix_predit = modele.predict(df_voiture_encoded)[0]
    print(f"üí∞ Prix pr√©dit : {round(prix_predit, 2)} ‚Ç¨")

    # 4. Extraire les crit√®res
    modele_col = voiture_exemple.get("mod√®le", None)
    kilometrage = voiture_exemple.get("kilom√©trage", None)
    puissance = voiture_exemple.get("puissance", None)

    if modele_col and kilometrage and puissance:
        km_min = kilometrage * 0.85
        km_max = kilometrage * 1.15
        puiss_min = puissance * 0.9
        puiss_max = puissance * 1.1

        # 5. Filtrer les voitures similaires dans df
        voitures_similaires = df[
            (df[modele_col] == 1) &
            (df['kilom√©trage'].between(km_min, km_max)) &
            (df['puissance'].between(puiss_min, puiss_max))
        ]

        if not voitures_similaires.empty:
            prix_moyen = voitures_similaires['prix'].mean()
            prix_min = voitures_similaires['prix'].min()
            prix_max = voitures_similaires['prix'].max()

            print(f"\nüìä Voitures similaires trouv√©es : {len(voitures_similaires)}")
            print(f"üìå Prix moyen observ√© : {round(prix_moyen, 2)} ‚Ç¨")
            print(f"üîª Prix minimum : {round(prix_min, 2)} ‚Ç¨")
            print(f"üî∫ Prix maximum : {round(prix_max, 2)} ‚Ç¨")

            if prix_predit < prix_moyen:
                print("‚úÖ Le prix pr√©dit est **inf√©rieur** au march√© ‚Üí bonne affaire.")
            elif prix_predit > prix_moyen:
                print("‚ö†Ô∏è Le prix pr√©dit est **sup√©rieur** au march√© ‚Üí √† surveiller.")
            else:
                print("üî∏ Le prix pr√©dit correspond exactement au prix moyen.")
        else:
            print("‚ùå Aucune voiture similaire trouv√©e dans le dataset.")
    else:
        print("‚ö†Ô∏è Informations manquantes (mod√®le, puissance, kilom√©trage).")



#voiture_exemple = {
    #'Mod√®le': 'bentley',
    #'Kilom√©trage': 10000,
    #'Puissance_CH': 500,
    #'Transmission_Bo√Æte automatique': True
#}

#prix_predit = predict_price(modele_knn, voiture_exemple, X_test.columns)
#print("üí∞ Prix pr√©dit :", round(prix_predit, 2))
